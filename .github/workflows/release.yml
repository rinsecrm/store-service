name: Release

# Trigger on version tags
on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.25.1'
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}
  REGISTRY: ghcr.io
  MANIFESTS_REPO: rinsecrm/manifests-microservices

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: make test

    - name: Build binary
      run: |
        VERSION="${{ github.ref_name }}"
        echo "Building release version: $VERSION"
        go build -ldflags="-X main.version=$VERSION" -o bin/$(basename ${{ github.repository }}) .

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build and push release image
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        docker build -f Dockerfile.ci -t ${{ env.DOCKER_IMAGE }}:$VERSION .
        docker tag ${{ env.DOCKER_IMAGE }}:$VERSION ${{ env.DOCKER_IMAGE }}:latest
        docker push ${{ env.DOCKER_IMAGE }}:$VERSION
        docker push ${{ env.DOCKER_IMAGE }}:latest
        
        echo "Built and pushed release images:"
        echo "- ${{ env.DOCKER_IMAGE }}:$VERSION"
        echo "- ${{ env.DOCKER_IMAGE }}:latest"

    - name: Update manifests repository
      env:
        MANIFESTS_TOKEN: ${{ secrets.MANIFESTS_TOKEN }}
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        
        # Clone manifests repository
        git clone https://github.com/${{ env.MANIFESTS_REPO }}.git manifests-repo
        cd manifests-repo
        
        # Configure git
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # 1. Create PR for staging
        echo "Creating PR for staging..."
        git checkout -b "release/$(basename ${{ github.repository }})-staging-$VERSION"
        sed -i "s/newTag: .*/newTag: $VERSION/" kustomize/$(basename ${{ github.repository }})/overlays/staging/kustomization.yaml
        git add kustomize/$(basename ${{ github.repository }})/overlays/staging/kustomization.yaml
        git commit -m "chore: update $(basename ${{ github.repository }}) to $VERSION for staging"
        git push https://$MANIFESTS_TOKEN@github.com/${{ env.MANIFESTS_REPO }}.git "release/$(basename ${{ github.repository }})-staging-$VERSION"
        
        # Create staging PR using GitHub CLI
        gh pr create \
          --title "Staging: Release $(basename ${{ github.repository }}) $VERSION" \
          --body "Automated release PR for staging environment.

        **Version:** $VERSION
        **Environment:** Staging
        **Docker Image:** ghcr.io/${{ github.repository }}:$VERSION

        This PR updates the staging environment to use the new release." \
          --base main \
          --head "release/$(basename ${{ github.repository }})-staging-$VERSION" || echo "Staging PR may already exist"
        
        # 2. Create PR for production
        echo "Creating PR for production..."
        git checkout main
        git checkout -b "release/$(basename ${{ github.repository }})-production-$VERSION"
        sed -i "s/newTag: .*/newTag: $VERSION/" kustomize/$(basename ${{ github.repository }})/overlays/production/kustomization.yaml
        git add kustomize/$(basename ${{ github.repository }})/overlays/production/kustomization.yaml
        git commit -m "chore: update $(basename ${{ github.repository }}) to $VERSION for production"
        git push https://$MANIFESTS_TOKEN@github.com/${{ env.MANIFESTS_REPO }}.git "release/$(basename ${{ github.repository }})-production-$VERSION"
        
        # Create production PR using GitHub CLI
        gh pr create \
          --title "Production: Release $(basename ${{ github.repository }}) $VERSION" \
          --body "Automated release PR for production environment.

        **Version:** $VERSION
        **Environment:** Production
        **Docker Image:** ghcr.io/${{ github.repository }}:$VERSION

        This PR updates the production environment to use the new release.
        
        **Note:** This should be merged after staging has been tested and approved." \
          --base main \
          --head "release/$(basename ${{ github.repository }})-production-$VERSION" || echo "Production PR may already exist"
        
        echo "Release workflow completed:"
        echo "- Integration will automatically get latest via ArgoCD sync"
        echo "- Staging PR created for $VERSION"
        echo "- Production PR created for $VERSION"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: $(basename ${{ github.repository }}) ${{ steps.version.outputs.VERSION }}
        body: |
          ## $(basename ${{ github.repository }}) ${{ steps.version.outputs.VERSION }}
          
          ### Docker Images
          - `ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}`
          - `ghcr.io/${{ github.repository }}:latest`
          
          ### Changes
          See the [changelog](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }}) for details.
          
          ### Deployment
          The manifests repository has been automatically updated with the new image tag.
        draft: false
        prerelease: false